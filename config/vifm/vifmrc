" % vim: set filetype=vim :
" OS-specific settings
" ---------------------------------------------
if system('uname -s') == "Linux"
  source ~/.config/vifm/os/linux.vifm
elseif system('uname -s') == "Darwin"
  source ~/.config/vifm/os/mac.vifm
else
  echo "Error: the current OS won't support all of my Vifm configurations."
endif
" echo "Current OS: " . $OS
" ---------------------------------------------

" BEGIN BASIC SETTINGS
" ---------------------------------------------
set vicmd=nvim          " basic editor command
set vimhelp             " use Vim-style help file instead of plain text
set syscalls            " perform file operations with vifm instead of cp
set trash               " use a temporary trash directory
set dotdirs=rootparent  " show ../ only when directory is empty
" set confirm-=delete     " disable confirmation when deleting files
set history=100         " directories to store in directory history
set undolevels=100      " maximum number of changes that can be undone
set nofollowlinks       " automatically resolve symbolic links on l or Enter.
set sortnumbers         " natural sort of (version) numbers within text
set nohlsearch          " don't highlight search results automatically
set noincsearch         " don't jump to match while type
set scrolloff=4         " add space between cursor and border in lists
set slowfs=curlftpfs    " don't do too many requests to slow file systems
set norunexec           " don't automatically run executable files on l or Enter
set cpoptions=fs        " to make <C-I> move forward in view history
colorscheme tokyonight nord solarized-dark Default-256 Default

" Ignore case in search patterns unless the pattern 
" contains at least one uppercase letter.
set ignorecase
set smartcase

" completion
set wildmenu         " show list of matches on tab completion in command-line mode
set wildstyle=popup  " display completions as a popup with descriptions of the matches

" What should be saved automatically between vifm sessions.
set vifminfo=dhistory,chistory,savedirs,state,tui,shistory,
    \phistory,fhistory,dirstack,registers,bookmarks,bmarks

" Set status line; add marker for Python virtual environments
highlight User1 ctermbg=blue ctermfg=black cterm=bold
highlight User2 ctermbg=yellow ctermfg=black cterm=bold
if $VIRTUAL_ENV != ""
  " The rev | cut | rev call extracts VENV folder; see "https://unix.stackexchange.com/a/217630
  execute 'set' 'statusline="%2*  VENV ' . 
        \ system("echo $VIRTUAL_ENV | rev | cut --delimiter='/' --fields=2 | rev") .
        \ '  %1* %A %10u:%-7g %15s %20d  %="'
else
  let &statusline = '%1*  %A %10u:%-7g %15s %20d  %='
endif

" format for time in file list
set timefmt=%m/%d\ %H:%M  

" Display suggestions in normal, visual and view modes for keys, marks and
" registers (at most 5 files).  In other view, when available.
set suggestoptions=normal,visual,view,otherpane,keys,marks,registers
" ---------------------------------------------
" END BASIC SETTINGS

source ~/.config/vifm/navigation/navigation.vifm
nnoremap ;; :source .vifm-context.vifm<CR>

" nnoremap ;vv :goto $VIFM_CONTEXT/.vifm-context.vifm<CR>
" nnoremap ;hh :cd $VIFM_CONTEXT<CR>
" To be able to use another command after one of these, wrap it with the
" |vifm-:execute| command.  An example: >
"   if filetype('.') == 'reg' | execute '!!echo regular file' | endif

" BEGIN MARKS
" --------------------------------------------- "
" Syntax: mark {mark} {directory} [filename]
mark T ~/.local/share/vifm/Trash
mark h ~
mark W ~/Downloads
mark u ~/dotfiles/config/nvim/LuaSnip
mark U ~/dotfiles/config/nvim/LuaSnip
" --------------------------------------------- "
" END MARKS


" BEGIN COMMANDS
" --------------------------------------------- "
" :com[mand][!] command_name action
" The following macros can be used in a command
" %a is replaced with the user arguments.
" %c the current file under the cursor.
" %C the current file under the cursor in the other directory.
" %f the current selected file, or files.
" %F the current selected file, or files in the other directory.
" %b same as %f %F.
" %d the current directory name.
" %D the other window directory name.
" %m run the command in a menu window

command! df df -h %m 2> /dev/null
command! diff vim -d %f %F
command! zip zip -r %f.zip %f
command! run !! ./%f
command! make !!make %a
command! mkcd :mkdir %a | cd %a
command! reload :write | restart full
" --------------------------------------------- "
" BEGIN COMMANDS


" BEGIN MAPPINGS
" --------------------------------------------- "
" Start shell in current directory
nnoremap s :shell<cr>

" Shortcut for edit command
nnoremap e :edit<space>

" Shortcut for mkdir command
nnoremap m :mkdir<space>

" Rename files
vnoremap RN :rename<CR>
nnoremap RN :rename<CR>

" Create a README.md file
nnoremap RM :edit README.md<CR>:goto README.md<CR>

" Create a TODO.md file
nnoremap TT :edit TODO.md<CR>:goto TODO.md<CR>

" Create temporary blah files
nnoremap BB :edit blah.md<CR>:goto blah.md<CR>
nnoremap BP :edit blah.py<CR>:goto blah.py<CR>
nnoremap BC :edit blah.c<CR>:goto blah.c<CR>

" Create a Python virtual environment
nnoremap MV :!python -m venv ./venv<CR>

" Mappings for faster renaming
nnoremap I cw<c-a>
nnoremap cc cw<c-u>
nnoremap A cw

" restart Vifm
nnoremap RR :restart<CR>

" Permission reset for files matching glob
nnoremap cm :!chmod 644 *.

" Make file under cursor executable
nnoremap cx :!chmod +x %c<CR>

" Play ambient audio tracks
nnoremap AA :!ambient.bash %c<CR>

" Open file under cursor with Neovim
nnoremap NN :!nvim %c<CR>

" Open file under cursor with sudoedit
nnoremap SS :!sudoedit %c<CR>

" Open file under cursor with Inkscape
nnoremap II :!inkscape %c > /dev/null 2>&1 &<CR>

" Open file under cursor with Scribus
nnoremap SC :!scribus %c > /dev/null 2>&1 &<CR>

" Run file under cursor as a shell script
nnoremap S :!sh %c<CR>

" Create symbolic link to file selected in inactve pane
nnoremap gL :!ln -s %C %d/%C:t || ln -s %C %d/%C:t.bak<CR>

" Convert directory under cursor to equally-named file
nnoremap MF :!vifm_tmp_filename="%c"; rm -r "${vifm_tmp_filename}"; touch "${vifm_tmp_filename}"<CR>

" Convert file under cursor to equally-named directory
nnoremap MD :!vifm_tmp_filename="%c"; rm "${vifm_tmp_filename}"; mkdir "${vifm_tmp_filename}"<CR>

" Add a .bak extension
nnoremap MB cw.bak<CR>

" Activate Python virtual environment, preserve files under cursor
nnoremap EE :let $VIFM_FILE_UNDER_CURSOR = expand("%c:p")<CR>:let $VIFM_OTHER_FILE_UNDER_CURSOR = expand("%C:p")<CR>:!activate-venv.bash<CR>
" --------------------------------------------- "
" END MAPPINGS


" BEGIN FILE OPENING CONFIGURATION
" ---------------------------------------------
" Image
" filetype {*.jpg,*.jpeg,*.png},<image/*> nsxiv %c &
filetype {*.jpg,*.jpeg,*.png},<image/*> feh %c &

" TeX
filetype {*.tex},<text/tex> nvim

" Scribus
filetype {*.sla},<application/vnd.scribus> scribus %c 2> /dev/null &

" LyTeX
filetype {*.lytex},<text/tex> nvim --listen /tmp/lytexsocket

" LilyPond
filetype {*.ly},<text/lilypond> nvim --listen /tmp/lilypondsocket

" Audio
filetype {*.wav,*.mp3,*.flac,*.m4a,*.wma,*.ape,*.ac3,*.og[agx],*.spx,*.opus},
        \<audio/*> mpv

" Video
" filetype {*.avi,*.mp4,*.wmv,*.dat,*.3gp,*.ogv,*.mkv,*.mpg,*.mpeg,*.vob,*.fl[icv],*.m2v,*.mov,*.webm,*.ts,*.mts,*.m4v,*.r[am],*.qt,*.divx, *.as[fx]},
filetype {*.avi,*.mp4,*.wmv,*.dat,*.3gp,*.ogv,*.mkv,*.mpg,*.mpeg,*.vob,*.webm,*.mov,*.m4v,*.qt},
      \<video/*> mpv --keep-open=yes

" SQLite
filetype {*.sqlite,*.db},<application/x-sqlite3> litecli

" HTML files
filetype {*.html,*.htm},<text/html>
      \ {Open with NeoVim}
      \ nvim,

" Object
filetype {*.o},<application/x-object> nm %f | less

" Man page
filetype {*.[1-8]},<text/troff> man ./%c
fileviewer {*.[1-8]},<text/troff> man ./%c | col -b

" MD5
filetype *.md5
      \ {Check MD5 hash sum}
      \ md5sum -c %f %S,

" SHA1
filetype *.sha1
      \ {Check SHA1 hash sum}
      \ sha1sum -c %f %S,

" SHA256
filetype *.sha256
      \ {Check SHA256 hash sum}
      \ sha256sum -c %f %S,

" SHA512
filetype *.sha512
      \ {Check SHA512 hash sum}
      \ sha512sum -c %f %S,

" Torrent
filetype {*.torrent},<application/x-bittorrent> open -a Transmission.app
fileviewer {*.torrent},<application/x-bittorrent> dumptorrent -v %c

" Extract zip files
filetype {*.zip},<application/zip,application/java-archive> unzip %f
fileviewer {*.zip,*.jar,*.war,*.ear},
      \<application/zip,application/java-archive>
      \ zip -sf %c

" Extract tar archives
filetype {*.tar,*.tar.bz2,*.tbz2,*.tgz,*.tar.gz},<application/x-tar>
      \ tar -xf %f
fileviewer {*.tar,*.tar.bz2,*.tbz2,*.tgz,*.tar.gz},<application/x-tar>
      \ tar -tf %f

" Extract .bz2 archives
filetype *.bz2 bzip2 -d %f

" Extract .gz files
filetype *.gz gunzip %f
" ---------------------------------------------
" END FILE OPENING CONFIGURATION

" Find file with fzf
command! FzfFind : set noquickview
      \| let $FZF_PICK = term('find | fzf --height 10 2>/dev/tty')
      \| if $FZF_PICK != ''
      \|     execute 'goto' fnameescape($FZF_PICK)
      \| endif
nnoremap F :FzfFind<CR>


" TEMPORARY: run extract.bash (for howacarworks) on file under cursor
nnoremap XX :!./extract.bash %c<CR>
