" % vim: set filetype=vim :
" OS-specific settings
" ---------------------------------------------
if system('uname -s') == "Linux"
  source ~/.config/vifm/personal/linux.vifm
elseif system('uname -s') == "Darwin"
  source ~/.config/vifm/personal/mac.vifm
else
  echo "Error: the current OS won't support all of my Vifm configurations."
endif
" echo "Current OS: " . $OS
" ---------------------------------------------

" BEGIN BASIC SETTINGS
" ---------------------------------------------
set vicmd=nvim          " basic editor command
set vimhelp             " use Vim-style help file instead of plain text
set syscalls            " perform file operations with vifm instead of cp
set trash               " use a temporary trash directory
set dotdirs=rootparent  " show ../ only when directory is empty
set confirm-=delete     " disable confirmation when deleting files
set history=100         " directories to store in directory history
set undolevels=100      " maximum number of changes that can be undone
set nofollowlinks       " automatically resolve symbolic links on l or Enter.
set sortnumbers         " natural sort of (version) numbers within text
set nohlsearch          " don't highlight search results automatically
set noincsearch         " don't jump to match while type
set scrolloff=4         " add space between cursor and border in lists
set slowfs=curlftpfs    " don't do too many requests to slow file systems
set norunexec           " don't automatically run executable files on l or Enter
colorscheme nord solarized-dark Default-256 Default

" Ignore case in search patterns unless the pattern 
" contains at least one uppercase letter.
set ignorecase
set smartcase

" completion
set wildmenu         " show list of matches on tab completion in command-line mode
set wildstyle=popup  " display completions as a popup with descriptions of the matches


" What should be saved automatically between vifm sessions.  Drop "savedirs"
" value if you don't want vifm to remember last visited directories for you.
set vifminfo=dhistory,savedirs,chistory,state,tui,shistory,
    \phistory,fhistory,dirstack,registers,bookmarks,bmarks

" Set custom status line look
set statusline="  Hint: %z%= %A %10u:%-7g %15s %20d  "

" format for time in file list
set timefmt=%m/%d\ %H:%M  

" Display suggestions in normal, visual and view modes for keys, marks and
" registers (at most 5 files).  In other view, when available.
set suggestoptions=normal,visual,view,otherpane,keys,marks,registers
" ---------------------------------------------
" END BASIC SETTINGS


" BEGIN MARKS
" --------------------------------------------- "
" Syntax: mark {mark} {directory} [filename]
mark 1 ~/Documents/academics/mat1
mark 6 ~/Documents/academics/telecomm/courses/probability
mark A ~/Media/academics
mark G ~/Media/tmg-bmc-media
mark M ~/Media/music/music-library
mark N ~/Media/academics/literature/deep-learning/nnfs
mark S ~/Media/software-and-web
mark T ~/.local/share/vifm/Trash
mark Z ~/Media/music/music-library/unsorted
mark a ~/Documents/about
mark b ~/Documents/bookmarks
mark B ~/Media/fitness-media
mark c ~/dotfiles/config
mark d ~/dotfiles
mark e ~/Documents/academics/telecomm/masters
mark f ~/Documents/academics/fmf
mark F ~/Documents/finances/
mark g ~/Documents/projects/tmg-bmc
mark h ~
mark D ~/Documents
mark W ~/Downloads
mark k ~/Documents/academics/klf
mark m ~/Documents/projects/music
mark p ~/Documents/planning
mark P ~/Documents/projects
mark q ~/Documents/academics/qap
mark r ~/Documents/basics/food/recipes
mark s ~/Documents/notes/software
mark n ~/Documents/notes
mark t ~/Documents/academics/telecomm
mark u ~/dotfiles/config/nvim/UltiSnips
mark v ~/dotfiles/config/nvim
mark w ~/Documents/projects/ejmastnak
" --------------------------------------------- "
" END MARKS


" BEGIN COMMANDS
" --------------------------------------------- "
" :com[mand][!] command_name action
" The following macros can be used in a command
" %a is replaced with the user arguments.
" %c the current file under the cursor.
" %C the current file under the cursor in the other directory.
" %f the current selected file, or files.
" %F the current selected file, or files in the other directory.
" %b same as %f %F.
" %d the current directory name.
" %D the other window directory name.
" %m run the command in a menu window

command! df df -h %m 2> /dev/null
command! diff vim -d %f %F
command! zip zip -r %f.zip %f
command! run !! ./%f
command! make !!make %a
command! mkcd :mkdir %a | cd %a
command! reload :write | restart full
" --------------------------------------------- "
" BEGIN COMMANDS


" BEGIN MAPPINGS
" --------------------------------------------- "
" Start shell in current directory
nnoremap s :shell<cr>

" Shortcut for edit command
nnoremap e :edit<space>

" Shortcut for mkdir command
nnoremap m :mkdir<space>

" " Display sorting dialog
" nnoremap S :sort<cr>

" Toggle visibility of preview window
nnoremap w :view<cr>
vnoremap w :view<cr>gv

" Mappings for faster renaming
nnoremap I cw<c-a>
nnoremap cc cw<c-u>
nnoremap A cw

" open vifmrc in editor
nnoremap C :!nvim -c 'set filetype=vim' $MYVIFMRC<CR>:restart<CR>

" give file under cursor 644 permissions
nnoremap cm :!chmod 644 *.

" Play file under cursor with mpv
nnoremap P :!mpv %c<CR>

" Open file under cursor with Neovim
nnoremap N :!nvim %c<CR>

" Run file under cursor as a shell script
nnoremap S :!sh %c<CR>
" --------------------------------------------- "
" END MAPPINGS


" BEGIN FILE OPENING CONFIGURATION
" ---------------------------------------------
" Image
filetype {*.jpg,*.jpeg,*.png},<image/*> feh %c &

" TeX
filetype {*.tex},<text/tex> nvim

" LyTeX
filetype {*.lytex},<text/tex> nvim --listen /tmp/lytexsocket

" LilyPond
filetype {*.ly},<text/lilypond> nvim --listen /tmp/lilypondsocket

" Audio
filetype {*.wav,*.mp3,*.flac,*.m4a,*.wma,*.ape,*.ac3,*.og[agx],*.spx,*.opus},
        \<audio/*> mpv

" Video
filetype {*.avi,*.mp4,*.wmv,*.dat,*.3gp,*.ogv,*.mkv,*.mpg,*.mpeg,*.vob,
         \*.fl[icv],*.m2v,*.mov,*.webm,*.ts,*.mts,*.m4v,*.r[am],*.qt,*.divx,
         \*.as[fx]},
        \<video/*>
       \ {Play using mpv}
       \ mpv,
fileviewer {*.avi,*.mp4,*.wmv,*.dat,*.3gp,*.ogv,*.mkv,*.mpg,*.mpeg,*.vob,
           \*.fl[icv],*.m2v,*.mov,*.webm,*.ts,*.mts,*.m4v,*.r[am],*.qt,*.divx,
           \*.as[fx]},
          \<video/*>
         \ ffprobe -pretty %c 2>&1

" HTML files
filetype {*.html,*.htm},<text/html>
       \ {Open with NeoVim}
       \ nvim,

" Object
filetype {*.o},<application/x-object> nm %f | less

" Man page
filetype {*.[1-8]},<text/troff> man ./%c
fileviewer {*.[1-8]},<text/troff> man ./%c | col -b

" MD5
filetype *.md5
       \ {Check MD5 hash sum}
       \ md5sum -c %f %S,

" SHA1
filetype *.sha1
       \ {Check SHA1 hash sum}
       \ sha1sum -c %f %S,

" SHA256
filetype *.sha256
       \ {Check SHA256 hash sum}
       \ sha256sum -c %f %S,

" SHA512
filetype *.sha512
       \ {Check SHA512 hash sum}
       \ sha512sum -c %f %S,

" Torrent
filetype {*.torrent},<application/x-bittorrent> open -a Transmission.app
fileviewer {*.torrent},<application/x-bittorrent> dumptorrent -v %c

" Extract zip files
filetype {*.zip},<application/zip,application/java-archive> unzip %f
fileviewer {*.zip,*.jar,*.war,*.ear},
          \<application/zip,application/java-archive>
          \ zip -sf %c

" Extract tar archives
filetype {*.tar,*.tar.bz2,*.tbz2,*.tgz,*.tar.gz},<application/x-tar>
       \ tar -xf %f
fileviewer {*.tar,*.tar.bz2,*.tbz2,*.tgz,*.tar.gz},<application/x-tar>
         \ tar -tf %f

" Extract .bz2 archives
filetype *.bz2 bzip2 -d %f

" Extract .gz files
filetype *.gz gunzip %f
" ---------------------------------------------
" END FILE OPENING CONFIGURATION
