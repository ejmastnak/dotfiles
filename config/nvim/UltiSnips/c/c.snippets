snippet df "New code block" A
{
	$0
}
endsnippet

snippet "(^|[\W])'"  "single quotation marks" rA
`!p snip.rv = match.group(1)`'${1:${VISUAL:}}'$0
endsnippet

snippet "(^|[\W])\""  "double quotation marks" rA
`!p snip.rv = match.group(1)`"${1:${VISUAL:}}"$0
endsnippet

snippet "(^|[^a-zA-Z])sd" "Back ticks (for inline code); alternate trigger" rA
`!p snip.rv = match.group(1)`\`${1:${VISUAL:}}\`$0
endsnippet

snippet pp "printf" bA
printf("$1"$2);$0
endsnippet

snippet rr "return" bA
return $1;
endsnippet

snippet cc "Block comment" bA
/*
	 $1 
*/
endsnippet

snippet -- "Long comment to visually break up text" bA
// ---------------------------------------------------------------- //
endsnippet

snippet ff "Generic function definition" bA
${1:type} ${2:name}($3) {
	$0
}
endsnippet

snippet vv "Void function definition" bA
void ${1:name}($2) {
	$0
}
endsnippet

snippet ii "Int function definition" bA
int ${1:name}($2) {
	$0
}
endsnippet

snippet def "#define symbolic constant" bA
#define $1 $0
endsnippet

snippet main "int main function" bA
int main() {
	$0

	return 0;
}
endsnippet

snippet args "main function with int argc, char *argv[]" iA
int main(int argc, char *argv[]) {
	$0

	return 0;
}
endsnippet



# File IO
# --------------------------------------------- #
snippet fopen "Open a file for reading" bA
// Open file for reading
FILE* file_path = fopen(${1:input_file}, "r");
if (file_path == NULL) {
	fprintf(stderr, "Cannot open file\n");
	exit(-1);
}
$0
fclose(file_path);
endsnippet

